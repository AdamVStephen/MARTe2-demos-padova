+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
	StackSize = 1048576
	CPUs = 0x1
    AutoStart = 0
	+PV_STATUS = {
		Class = EPICS::EPICSPV
		PVName = "MARTE2-DEMO-APP:STATUS"
		PVType = int32
   	}    
	+PV_COMMAND = {
		Class = EPICS::EPICSPV
		PVName = "MARTE2-DEMO-APP:COMMAND"
		PVType = uint32
		Event = {
    		Destination = StateMachine
    		PVValue = Function
    		FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
		}
   	}
	+PV_ERROR_RST = {
		Class = EPICS::EPICSPV
		PVName = "MARTE2-DEMO-APP:RESET"
		PVType = uint32
		Event = {
    		Destination = StateMachine
    		PVValue = Ignore
    		Function = "RESET" 
        }
	}
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICSCAInterface.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 1
        		}
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICSCAInterface.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICSCAInterface.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = -1
        		}
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICSCAInterface.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            }
        }   
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 100
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                	
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32         	
                }
                Run_Thread1_CycleTime = {                	
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32         	
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32         	
                }
                Run_Thread1_CycleTime = {                	
                    DataSource = DDB1
                    Type = uint32         	
                }
            }
        }
        +GAMWF1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 5.0
            Frequency = 1.0
            Phase = 0.0
            Offset = 1.1
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                DACReference = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMWF2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 2.0
            Phase = 0.0
            Offset = 1.1
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                ADC0_0_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMWF3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 4.0
            Frequency = 3.0
            Phase = 0.0
            Offset = 1.1
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                ADC0_1_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMWF4 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 10.0
            Phase = 0.0
            Offset = 1.1
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                ADC0_2_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMWF5 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 5.0
            Frequency = 0.1
            Phase = 0.0
            Offset = 1.1
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                ADC0_3_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMHistogramCycleTimes = {
            Class = HistogramGAM
            BeginCycleNumber = 10
            StateChangeResetName = All
            InputSignals = {
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1                	
                    Type = uint32
                    MinLim = 8000
                    MaxLim = 12000
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1                	
                    Type = uint32
                    MinLim = 8000
                    MaxLim = 12000
                }
            }
            OutputSignals = {
                Idle_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutput
                    NumberOfElements = 10
                    Type = uint32
                }
                Run_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutput
                    NumberOfElements = 10
                    Type = uint32
                }
            }
        }
        +GAMPerformanceWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                	
                    DataSource = DDB1
                    Type = uint32         	
                }
                Run_Thread1_CycleTime = {                	
                    DataSource = DDB1
                    Type = uint32         	
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32         	
                } 
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32         	
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32         	
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = Timings
                    Type = uint32         	
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = PerformanceWriter
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                	
                    DataSource = PerformanceWriter
                    Type = uint32         	
                }
                Run_Thread1_CycleTime = {                	
                    DataSource = PerformanceWriter
                    Type = uint32         	
                }
                GAMTimer_ReadTime = {
                    DataSource = PerformanceWriter 
                    Type = uint32         	
                } 
                GAMTimer_ExecTime = {
                    DataSource = PerformanceWriter
                    Type = uint32         	
                }
                GAMTimer_WriteTime = {
                    DataSource = PerformanceWriter
                    Type = uint32         	
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = PerformanceWriter
                    Type = uint32         	
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                DACReference = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0_0_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0_1_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0_2_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0_3_0_f = {
                    DataSource = DDB1
                    Type = float32
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                DACReference = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                ADC0_0_0_f = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                ADC0_1_0_f = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                ADC0_2_0_f = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                ADC0_3_0_f = {
                    DataSource = SignalsWriter
                    Type = float32
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/tmp/RTApp-EPICSv3-2.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = "uint32"
                }
                DACReference = {
                    Type = "float32"
                } 
                ADC0_0_0_f = {
                    Type = "float32"
                }
                ADC0_1_0_f = {
                    Type = "float32"
                }
                ADC0_2_0_f = {
                    Type = "float32"
                }
                ADC0_3_0_f = {
                    Type = "float32"
                }
            }
        }
        +PerformanceWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/tmp/RTApp-EPICSv3-2-performance.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = "uint32"
                }
                Idle_Thread1_CycleTime = {
                    Type = "uint32"
                } 
                Run_Thread1_CycleTime = {
                    Type = "uint32"
                }
                GAMTimer_ReadTime = {
                    Type = "uint32"
                }
                GAMTimer_ExecTime = {
                    Type = "uint32"
                }
                GAMTimer_WriteTime = {
                    Type = "uint32"
                }
                GAMPerformanceWriter_WriteTime = {
                    Type = "uint32"
                }
            }
        }
        +EPICSCAOutput = {
            Class = EPICSCA::EPICSCAOutput
            StackSize = 1048576 
            CPUs = 0x1
            IgnoreBufferOverrun = 1 
            NumberOfBuffers = 10 
            Signals = {
                Idle_Thread1_CycleTime_Stats = {
                    PVName = "MARTE2-DEMO-APP:HIST-IDLE-CT"
                    Type = uint32 
                }
                Run_Thread1_CycleTime_Stats = {
                    PVName = "MARTE2-DEMO-APP:HIST-RUN-CT"
                    Type = uint32 
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer GAMWF1 GAMWF2 GAMWF3 GAMWF4 GAMWF5 GAMHistogramCycleTimes }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer GAMWF1 GAMWF2 GAMWF3 GAMWF4 GAMWF5 GAMSignalsWriter GAMPerformanceWriter GAMHistogramCycleTimes }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
